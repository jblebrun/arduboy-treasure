#include "Game.h"

const uint8_t sprites[][10] PROGMEM = {{
                                           0x8,
                                           0x8,
                                           0x3C,
                                           0x42,
                                           0x81,
                                           0x81,
                                           0x81,
                                           0x81,
                                           0x42,
                                           0x3C,
                                       },
                                       {
                                           8,
                                           8,
                                           0x0,
                                           0x0,
                                           0x0,
                                           0x18,
                                           0x18,
                                           0x0,
                                           0x0,
                                           0x0,
                                       },
                                       {
                                           8,
                                           8,
                                           0xFF,
                                           0x81,
                                           0x81,
                                           0xBD,
                                           0xBD,
                                           0x81,
                                           0x81,
                                           0xFF,
                                       },
                                       {
                                           8,
                                           8,
                                           0x7E,
                                           0x81,
                                           0x95,
                                           0xA1,
                                           0xA1,
                                           0x95,
                                           0x81,
                                           0x7E,
                                       },
                                       {
                                           8,
                                           8,
                                           0x18,
                                           0x3C,
                                           0x7E,
                                           0xFF,
                                           0xFF,
                                           0x7E,
                                           0x3C,
                                           0x18,
                                       },
                                       {
                                           8,
                                           8,
                                           0x7E,
                                           0x81,
                                           0xA5,
                                           0x91,
                                           0x91,
                                           0xA5,
                                           0x81,
                                           0x7E,
                                       }};

// 01111110
// 10000001
// 10100101
// 10000001
// 10011001
// 10100101
// 10000001
// 01111110

const uint8_t MAP_W = 32;
const uint8_t MAP_H = 16;

const uint8_t LEVELS = 4;
const bool SCROLLS[LEVELS] = {false, false, true, true};
// clang-format off
const uint8_t m[LEVELS][MAP_H][MAP_W] PROGMEM = {
    {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, 
    {2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 4, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 4, 1, 0, 1, 2, 2, 0, 1},
    {2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 2, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1},
},
   {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, 
    {2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 4, 1, 0, 1, 2, 2, 0, 1},
    {2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 2, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1},
},
  {
    {2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, 
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 4, 1, 0, 1, 2, 2, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 2, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1},
},
{
    {2, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, 
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 4, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 2, 1, 0},
    {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1},
}
};

// clang-format on
Game::Game(Renderer &r) : renderer(r) {}

uint8_t Game::tileAt(uint16_t x, uint16_t y) {
  // Return the tile correspond to the upper-left part of player
  uint8_t tx = (x >> 3) % MAP_W;
  uint8_t ty = (y >> 3) % MAP_H;
  return pgm_read_byte(&m[level][ty][tx]);
}

bool Game::checkCollisions(uint8_t target) {
  return (tileAt(po.x, po.y) == target) || (tileAt(po.x, po.y + 7) == target) ||
         (tileAt(po.x + 7, po.y) == target) ||
         (tileAt(po.x + 7, po.y + 7) == target);
}

void Game::Up() {
  check(offset{
      .x = po.x,
      .y = uint8_t(po.y - 1),
  });
}

void Game::Down() {
  check(offset{
      .x = po.x,
      .y = uint8_t(po.y + 1),
  });
}

void Game::Left() { check(offset{.x = uint8_t(po.x - 1), .y = po.y}); }

void Game::Right() { check(offset{.x = uint8_t(po.x + 1), .y = po.y}); }

void Game::B() {
  if (state == WIN) {
    renderer.PlaySong(1, 10, true);
    state = TITLE;
    return;
  }
  renderer.PlaySong(0, 0);
  state = PLAY;
  mo = (struct offset){};
  po = (struct offset){.x = 64 - 4, .y = 32 - 4};
}

void Game::check(offset next) {
  if (state != PLAY) {
    return;
  }

  offset last = po;
  po = next;

  // Scroll map to keep player in view
  // If moving left out of player bounds,
  // adjust map to the left by decrementing map offset
  if (SCROLLS[level]) {
    uint8_t rx = uint8_t(po.x - mo.x);
    uint8_t ry = uint8_t(po.y - mo.y);

    if (rx <= PX_MIN) {
      mo.x += rx - PX_MIN;
    }
    if (rx >= PX_MAX) {
      mo.x -= PX_MAX - rx;
    }
    if (ry <= PY_MIN) {
      mo.y += ry - PY_MIN;
    }
    if (ry >= PY_MAX) {
      mo.y -= PY_MAX - ry;
    }
  }

  // If moving right out of player bounds,
  // adjust map to the left by incrementing map offset

  if (stepCounter == 0) {
    renderer.Sound(55, 75, 1);
    stepCounter = 4;
  }
  stepCounter--;

  Serial.println(int8_t(eo.x)-po.x);
  Serial.println(int8_t(eo.y)-po.y);
  Serial.println("");
  if (abs(int8_t(eo.x)-po.x) < 8 && abs(int8_t(eo.y)-po.y) < 8) {
    renderer.Sound(110, 130, 15);
    state = DEAD;
    level = 0;
  } else if (checkCollisions(2)) {
    renderer.Sound(55, 110, 5);
    po = last;
  } else if (checkCollisions(4)) {
    level++;
    mo = (struct offset){};
    po = (struct offset){.x = 64 - 4, .y = 32 - 4};
    if (level == LEVELS) {
      renderer.PlaySong(1, 5, true);
      state = WIN;
      level = 0;
    } else {
      renderer.Sound(440, 680, 15);
      state = TITLE;
    }
  }
}

void Game::drawPlayer() {
  uint8_t rx = uint8_t(po.x - mo.x);
  uint8_t ry = uint8_t(po.y - mo.y);
  renderer.DrawBitmap(rx, ry, sprites[3]);
}

void Game::drawEnemy() {
  int8_t rx = int8_t(eo.x - mo.x);
  int8_t ry = int8_t(eo.y - mo.y);
  if(rx < -8 || ry < -8 || rx > WIDTH || ry > HEIGHT) {
    return;
  }
  renderer.DrawBitmap(rx, ry, sprites[5]);
}

void Game::drawMap() {
  int16_t txs = mo.x >> 3;
  int16_t tys = mo.y >> 3;
  uint8_t pox = mo.x & 0x7;
  uint8_t poy = mo.y & 0x7;

  for (int16_t iy = 0; iy < 10; iy++) {
    for (int16_t ix = 0; ix < 18; ix++) {
      int16_t tx = (txs + ix) % MAP_W;
      int16_t ty = (tys + iy) % MAP_H;
      uint8_t s = pgm_read_byte(&m[level][ty][tx]);
      renderer.DrawBitmap(ix * 8 - pox, iy * 8 - poy, sprites[s]);
    }
  }
}

void Game::Render() {
  renderer.Clear();
  switch (state) {
  case TITLE:
    if (level == 0) {
      renderer.Print("FIND THE TREASURES");
    } else {
      renderer.Print("NEXT LEVEL");
    }
    break;
  case DEAD:
    renderer.Print("YOU DIED");
    break;
  case WIN:
    renderer.Print("YOU DID IT!");
    break;
  default:
    drawMap();
    drawPlayer();
    drawEnemy();
  }
  renderer.Display();
}
